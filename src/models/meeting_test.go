// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testMeetings(t *testing.T) {
	t.Parallel()

	query := Meetings(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testMeetingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = meeting.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMeetingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Meetings(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMeetingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MeetingSlice{meeting}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testMeetingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MeetingExists(tx, meeting.MeetingID)
	if err != nil {
		t.Errorf("Unable to check if Meeting exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MeetingExistsG to return true, but got false.")
	}
}
func testMeetingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	meetingFound, err := FindMeeting(tx, meeting.MeetingID)
	if err != nil {
		t.Error(err)
	}

	if meetingFound == nil {
		t.Error("want a record, got nil")
	}
}
func testMeetingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Meetings(tx).Bind(meeting); err != nil {
		t.Error(err)
	}
}

func testMeetingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Meetings(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMeetingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meetingOne := &Meeting{}
	meetingTwo := &Meeting{}
	if err = randomize.Struct(seed, meetingOne, meetingDBTypes, false, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}
	if err = randomize.Struct(seed, meetingTwo, meetingDBTypes, false, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meetingOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = meetingTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Meetings(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMeetingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	meetingOne := &Meeting{}
	meetingTwo := &Meeting{}
	if err = randomize.Struct(seed, meetingOne, meetingDBTypes, false, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}
	if err = randomize.Struct(seed, meetingTwo, meetingDBTypes, false, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meetingOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = meetingTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func meetingBeforeInsertHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingAfterInsertHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingAfterSelectHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingBeforeUpdateHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingAfterUpdateHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingBeforeDeleteHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingAfterDeleteHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingBeforeUpsertHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func meetingAfterUpsertHook(e boil.Executor, o *Meeting) error {
	*o = Meeting{}
	return nil
}

func testMeetingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Meeting{}
	o := &Meeting{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, meetingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Meeting object: %s", err)
	}

	AddMeetingHook(boil.BeforeInsertHook, meetingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	meetingBeforeInsertHooks = []MeetingHook{}

	AddMeetingHook(boil.AfterInsertHook, meetingAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	meetingAfterInsertHooks = []MeetingHook{}

	AddMeetingHook(boil.AfterSelectHook, meetingAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	meetingAfterSelectHooks = []MeetingHook{}

	AddMeetingHook(boil.BeforeUpdateHook, meetingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	meetingBeforeUpdateHooks = []MeetingHook{}

	AddMeetingHook(boil.AfterUpdateHook, meetingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	meetingAfterUpdateHooks = []MeetingHook{}

	AddMeetingHook(boil.BeforeDeleteHook, meetingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	meetingBeforeDeleteHooks = []MeetingHook{}

	AddMeetingHook(boil.AfterDeleteHook, meetingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	meetingAfterDeleteHooks = []MeetingHook{}

	AddMeetingHook(boil.BeforeUpsertHook, meetingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	meetingBeforeUpsertHooks = []MeetingHook{}

	AddMeetingHook(boil.AfterUpsertHook, meetingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	meetingAfterUpsertHooks = []MeetingHook{}
}
func testMeetingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMeetingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx, meetingColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMeetingToManyRaces(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Meeting
	var b, c Race

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, raceDBTypes, false, raceColumnsWithDefault...)
	randomize.Struct(seed, &c, raceDBTypes, false, raceColumnsWithDefault...)

	b.MeetingID.Valid = true
	c.MeetingID.Valid = true
	b.MeetingID.String = a.MeetingID
	c.MeetingID.String = a.MeetingID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	race, err := a.Races(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range race {
		if v.MeetingID.String == b.MeetingID.String {
			bFound = true
		}
		if v.MeetingID.String == c.MeetingID.String {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MeetingSlice{&a}
	if err = a.L.LoadRaces(tx, false, (*[]*Meeting)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Races); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Races = nil
	if err = a.L.LoadRaces(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Races); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", race)
	}
}

func testMeetingToManyAddOpRaces(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Meeting
	var b, c, d, e Race

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, meetingDBTypes, false, strmangle.SetComplement(meetingPrimaryKeyColumns, meetingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Race{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, raceDBTypes, false, strmangle.SetComplement(racePrimaryKeyColumns, raceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Race{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRaces(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MeetingID != first.MeetingID.String {
			t.Error("foreign key was wrong value", a.MeetingID, first.MeetingID.String)
		}
		if a.MeetingID != second.MeetingID.String {
			t.Error("foreign key was wrong value", a.MeetingID, second.MeetingID.String)
		}

		if first.R.Meeting != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Meeting != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Races[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Races[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Races(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMeetingToManySetOpRaces(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Meeting
	var b, c, d, e Race

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, meetingDBTypes, false, strmangle.SetComplement(meetingPrimaryKeyColumns, meetingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Race{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, raceDBTypes, false, strmangle.SetComplement(racePrimaryKeyColumns, raceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetRaces(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Races(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRaces(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Races(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.MeetingID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.MeetingID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.MeetingID != d.MeetingID.String {
		t.Error("foreign key was wrong value", a.MeetingID, d.MeetingID.String)
	}
	if a.MeetingID != e.MeetingID.String {
		t.Error("foreign key was wrong value", a.MeetingID, e.MeetingID.String)
	}

	if b.R.Meeting != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Meeting != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Meeting != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Meeting != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Races[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Races[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMeetingToManyRemoveOpRaces(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Meeting
	var b, c, d, e Race

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, meetingDBTypes, false, strmangle.SetComplement(meetingPrimaryKeyColumns, meetingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Race{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, raceDBTypes, false, strmangle.SetComplement(racePrimaryKeyColumns, raceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddRaces(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Races(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRaces(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Races(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.MeetingID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.MeetingID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Meeting != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Meeting != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Meeting != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Meeting != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Races) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Races[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Races[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMeetingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = meeting.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMeetingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MeetingSlice{meeting}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testMeetingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Meetings(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	meetingDBTypes = map[string]string{`MeetingID`: `uuid`, `MeetingName`: `character`}
	_              = bytes.MinRead
)

func testMeetingsUpdate(t *testing.T) {
	t.Parallel()

	if len(meetingColumns) == len(meetingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	if err = meeting.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMeetingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(meetingColumns) == len(meetingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	meeting := &Meeting{}
	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, meeting, meetingDBTypes, true, meetingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(meetingColumns, meetingPrimaryKeyColumns) {
		fields = meetingColumns
	} else {
		fields = strmangle.SetComplement(
			meetingColumns,
			meetingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(meeting))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MeetingSlice{meeting}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testMeetingsUpsert(t *testing.T) {
	t.Parallel()

	if len(meetingColumns) == len(meetingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	meeting := Meeting{}
	if err = randomize.Struct(seed, &meeting, meetingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = meeting.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Meeting: %s", err)
	}

	count, err := Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &meeting, meetingDBTypes, false, meetingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Meeting struct: %s", err)
	}

	if err = meeting.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Meeting: %s", err)
	}

	count, err = Meetings(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
