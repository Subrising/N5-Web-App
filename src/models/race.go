// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Race is an object representing the database table.
type Race struct {
	RaceID      string      `boil:"race_id" json:"race_id" toml:"race_id" yaml:"race_id"`
	MeetingID   null.String `boil:"meeting_id" json:"meeting_id,omitempty" toml:"meeting_id" yaml:"meeting_id,omitempty"`
	ClosingTime time.Time   `boil:"closing_time" json:"closing_time" toml:"closing_time" yaml:"closing_time"`
	RaceType    string      `boil:"race_type" json:"race_type" toml:"race_type" yaml:"race_type"`

	R *raceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L raceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RaceColumns = struct {
	RaceID      string
	MeetingID   string
	ClosingTime string
	RaceType    string
}{
	RaceID:      "race_id",
	MeetingID:   "meeting_id",
	ClosingTime: "closing_time",
	RaceType:    "race_type",
}

// raceR is where relationships are stored.
type raceR struct {
	Meeting     *Meeting
	Competitors CompetitorSlice
}

// raceL is where Load methods for each relationship are stored.
type raceL struct{}

var (
	raceColumns               = []string{"race_id", "meeting_id", "closing_time", "race_type"}
	raceColumnsWithoutDefault = []string{"meeting_id", "closing_time", "race_type"}
	raceColumnsWithDefault    = []string{"race_id"}
	racePrimaryKeyColumns     = []string{"race_id"}
)

type (
	// RaceSlice is an alias for a slice of pointers to Race.
	// This should generally be used opposed to []Race.
	RaceSlice []*Race
	// RaceHook is the signature for custom Race hook methods
	RaceHook func(boil.Executor, *Race) error

	raceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	raceType                 = reflect.TypeOf(&Race{})
	raceMapping              = queries.MakeStructMapping(raceType)
	racePrimaryKeyMapping, _ = queries.BindMapping(raceType, raceMapping, racePrimaryKeyColumns)
	raceInsertCacheMut       sync.RWMutex
	raceInsertCache          = make(map[string]insertCache)
	raceUpdateCacheMut       sync.RWMutex
	raceUpdateCache          = make(map[string]updateCache)
	raceUpsertCacheMut       sync.RWMutex
	raceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var raceBeforeInsertHooks []RaceHook
var raceBeforeUpdateHooks []RaceHook
var raceBeforeDeleteHooks []RaceHook
var raceBeforeUpsertHooks []RaceHook

var raceAfterInsertHooks []RaceHook
var raceAfterSelectHooks []RaceHook
var raceAfterUpdateHooks []RaceHook
var raceAfterDeleteHooks []RaceHook
var raceAfterUpsertHooks []RaceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Race) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range raceBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Race) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range raceBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Race) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range raceBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Race) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range raceBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Race) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range raceAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Race) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range raceAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Race) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range raceAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Race) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range raceAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Race) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range raceAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRaceHook registers your hook function for all future operations.
func AddRaceHook(hookPoint boil.HookPoint, raceHook RaceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		raceBeforeInsertHooks = append(raceBeforeInsertHooks, raceHook)
	case boil.BeforeUpdateHook:
		raceBeforeUpdateHooks = append(raceBeforeUpdateHooks, raceHook)
	case boil.BeforeDeleteHook:
		raceBeforeDeleteHooks = append(raceBeforeDeleteHooks, raceHook)
	case boil.BeforeUpsertHook:
		raceBeforeUpsertHooks = append(raceBeforeUpsertHooks, raceHook)
	case boil.AfterInsertHook:
		raceAfterInsertHooks = append(raceAfterInsertHooks, raceHook)
	case boil.AfterSelectHook:
		raceAfterSelectHooks = append(raceAfterSelectHooks, raceHook)
	case boil.AfterUpdateHook:
		raceAfterUpdateHooks = append(raceAfterUpdateHooks, raceHook)
	case boil.AfterDeleteHook:
		raceAfterDeleteHooks = append(raceAfterDeleteHooks, raceHook)
	case boil.AfterUpsertHook:
		raceAfterUpsertHooks = append(raceAfterUpsertHooks, raceHook)
	}
}

// OneP returns a single race record from the query, and panics on error.
func (q raceQuery) OneP() *Race {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single race record from the query.
func (q raceQuery) One() (*Race, error) {
	o := &Race{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for race")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Race records from the query, and panics on error.
func (q raceQuery) AllP() RaceSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Race records from the query.
func (q raceQuery) All() (RaceSlice, error) {
	var o []*Race

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Race slice")
	}

	if len(raceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Race records in the query, and panics on error.
func (q raceQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Race records in the query.
func (q raceQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count race rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q raceQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q raceQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if race exists")
	}

	return count > 0, nil
}

// MeetingG pointed to by the foreign key.
func (o *Race) MeetingG(mods ...qm.QueryMod) meetingQuery {
	return o.Meeting(boil.GetDB(), mods...)
}

// Meeting pointed to by the foreign key.
func (o *Race) Meeting(exec boil.Executor, mods ...qm.QueryMod) meetingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("meeting_id=?", o.MeetingID),
	}

	queryMods = append(queryMods, mods...)

	query := Meetings(exec, queryMods...)
	queries.SetFrom(query.Query, "\"meeting\"")

	return query
}

// CompetitorsG retrieves all the competitor's competitor.
func (o *Race) CompetitorsG(mods ...qm.QueryMod) competitorQuery {
	return o.Competitors(boil.GetDB(), mods...)
}

// Competitors retrieves all the competitor's competitor with an executor.
func (o *Race) Competitors(exec boil.Executor, mods ...qm.QueryMod) competitorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competitor\".\"race_id\"=?", o.RaceID),
	)

	query := Competitors(exec, queryMods...)
	queries.SetFrom(query.Query, "\"competitor\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"competitor\".*"})
	}

	return query
}

// LoadMeeting allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (raceL) LoadMeeting(e boil.Executor, singular bool, maybeRace interface{}) error {
	var slice []*Race
	var object *Race

	count := 1
	if singular {
		object = maybeRace.(*Race)
	} else {
		slice = *maybeRace.(*[]*Race)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &raceR{}
		}
		args[0] = object.MeetingID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &raceR{}
			}
			args[i] = obj.MeetingID
		}
	}

	query := fmt.Sprintf(
		"select * from \"meeting\" where \"meeting_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Meeting")
	}
	defer results.Close()

	var resultSlice []*Meeting
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Meeting")
	}

	if len(raceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Meeting = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MeetingID.String == foreign.MeetingID {
				local.R.Meeting = foreign
				break
			}
		}
	}

	return nil
}

// LoadCompetitors allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (raceL) LoadCompetitors(e boil.Executor, singular bool, maybeRace interface{}) error {
	var slice []*Race
	var object *Race

	count := 1
	if singular {
		object = maybeRace.(*Race)
	} else {
		slice = *maybeRace.(*[]*Race)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &raceR{}
		}
		args[0] = object.RaceID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &raceR{}
			}
			args[i] = obj.RaceID
		}
	}

	query := fmt.Sprintf(
		"select * from \"competitor\" where \"race_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competitor")
	}
	defer results.Close()

	var resultSlice []*Competitor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competitor")
	}

	if len(competitorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Competitors = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RaceID == foreign.RaceID.String {
				local.R.Competitors = append(local.R.Competitors, foreign)
				break
			}
		}
	}

	return nil
}

// SetMeetingG of the race to the related item.
// Sets o.R.Meeting to related.
// Adds o to related.R.Races.
// Uses the global database handle.
func (o *Race) SetMeetingG(insert bool, related *Meeting) error {
	return o.SetMeeting(boil.GetDB(), insert, related)
}

// SetMeetingP of the race to the related item.
// Sets o.R.Meeting to related.
// Adds o to related.R.Races.
// Panics on error.
func (o *Race) SetMeetingP(exec boil.Executor, insert bool, related *Meeting) {
	if err := o.SetMeeting(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMeetingGP of the race to the related item.
// Sets o.R.Meeting to related.
// Adds o to related.R.Races.
// Uses the global database handle and panics on error.
func (o *Race) SetMeetingGP(insert bool, related *Meeting) {
	if err := o.SetMeeting(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMeeting of the race to the related item.
// Sets o.R.Meeting to related.
// Adds o to related.R.Races.
func (o *Race) SetMeeting(exec boil.Executor, insert bool, related *Meeting) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"race\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"meeting_id"}),
		strmangle.WhereClause("\"", "\"", 2, racePrimaryKeyColumns),
	)
	values := []interface{}{related.MeetingID, o.RaceID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MeetingID.String = related.MeetingID
	o.MeetingID.Valid = true

	if o.R == nil {
		o.R = &raceR{
			Meeting: related,
		}
	} else {
		o.R.Meeting = related
	}

	if related.R == nil {
		related.R = &meetingR{
			Races: RaceSlice{o},
		}
	} else {
		related.R.Races = append(related.R.Races, o)
	}

	return nil
}

// RemoveMeetingG relationship.
// Sets o.R.Meeting to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Race) RemoveMeetingG(related *Meeting) error {
	return o.RemoveMeeting(boil.GetDB(), related)
}

// RemoveMeetingP relationship.
// Sets o.R.Meeting to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Race) RemoveMeetingP(exec boil.Executor, related *Meeting) {
	if err := o.RemoveMeeting(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMeetingGP relationship.
// Sets o.R.Meeting to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Race) RemoveMeetingGP(related *Meeting) {
	if err := o.RemoveMeeting(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMeeting relationship.
// Sets o.R.Meeting to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Race) RemoveMeeting(exec boil.Executor, related *Meeting) error {
	var err error

	o.MeetingID.Valid = false
	if err = o.Update(exec, "meeting_id"); err != nil {
		o.MeetingID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Meeting = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Races {
		if o.MeetingID.String != ri.MeetingID.String {
			continue
		}

		ln := len(related.R.Races)
		if ln > 1 && i < ln-1 {
			related.R.Races[i] = related.R.Races[ln-1]
		}
		related.R.Races = related.R.Races[:ln-1]
		break
	}
	return nil
}

// AddCompetitorsG adds the given related objects to the existing relationships
// of the race, optionally inserting them as new records.
// Appends related to o.R.Competitors.
// Sets related.R.Race appropriately.
// Uses the global database handle.
func (o *Race) AddCompetitorsG(insert bool, related ...*Competitor) error {
	return o.AddCompetitors(boil.GetDB(), insert, related...)
}

// AddCompetitorsP adds the given related objects to the existing relationships
// of the race, optionally inserting them as new records.
// Appends related to o.R.Competitors.
// Sets related.R.Race appropriately.
// Panics on error.
func (o *Race) AddCompetitorsP(exec boil.Executor, insert bool, related ...*Competitor) {
	if err := o.AddCompetitors(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCompetitorsGP adds the given related objects to the existing relationships
// of the race, optionally inserting them as new records.
// Appends related to o.R.Competitors.
// Sets related.R.Race appropriately.
// Uses the global database handle and panics on error.
func (o *Race) AddCompetitorsGP(insert bool, related ...*Competitor) {
	if err := o.AddCompetitors(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCompetitors adds the given related objects to the existing relationships
// of the race, optionally inserting them as new records.
// Appends related to o.R.Competitors.
// Sets related.R.Race appropriately.
func (o *Race) AddCompetitors(exec boil.Executor, insert bool, related ...*Competitor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RaceID.String = o.RaceID
			rel.RaceID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competitor\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"race_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitorPrimaryKeyColumns),
			)
			values := []interface{}{o.RaceID, rel.CompetitorID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RaceID.String = o.RaceID
			rel.RaceID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &raceR{
			Competitors: related,
		}
	} else {
		o.R.Competitors = append(o.R.Competitors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitorR{
				Race: o,
			}
		} else {
			rel.R.Race = o
		}
	}
	return nil
}

// SetCompetitorsG removes all previously related items of the
// race replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Race's Competitors accordingly.
// Replaces o.R.Competitors with related.
// Sets related.R.Race's Competitors accordingly.
// Uses the global database handle.
func (o *Race) SetCompetitorsG(insert bool, related ...*Competitor) error {
	return o.SetCompetitors(boil.GetDB(), insert, related...)
}

// SetCompetitorsP removes all previously related items of the
// race replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Race's Competitors accordingly.
// Replaces o.R.Competitors with related.
// Sets related.R.Race's Competitors accordingly.
// Panics on error.
func (o *Race) SetCompetitorsP(exec boil.Executor, insert bool, related ...*Competitor) {
	if err := o.SetCompetitors(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCompetitorsGP removes all previously related items of the
// race replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Race's Competitors accordingly.
// Replaces o.R.Competitors with related.
// Sets related.R.Race's Competitors accordingly.
// Uses the global database handle and panics on error.
func (o *Race) SetCompetitorsGP(insert bool, related ...*Competitor) {
	if err := o.SetCompetitors(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCompetitors removes all previously related items of the
// race replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Race's Competitors accordingly.
// Replaces o.R.Competitors with related.
// Sets related.R.Race's Competitors accordingly.
func (o *Race) SetCompetitors(exec boil.Executor, insert bool, related ...*Competitor) error {
	query := "update \"competitor\" set \"race_id\" = null where \"race_id\" = $1"
	values := []interface{}{o.RaceID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Competitors {
			rel.RaceID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Race = nil
		}

		o.R.Competitors = nil
	}
	return o.AddCompetitors(exec, insert, related...)
}

// RemoveCompetitorsG relationships from objects passed in.
// Removes related items from R.Competitors (uses pointer comparison, removal does not keep order)
// Sets related.R.Race.
// Uses the global database handle.
func (o *Race) RemoveCompetitorsG(related ...*Competitor) error {
	return o.RemoveCompetitors(boil.GetDB(), related...)
}

// RemoveCompetitorsP relationships from objects passed in.
// Removes related items from R.Competitors (uses pointer comparison, removal does not keep order)
// Sets related.R.Race.
// Panics on error.
func (o *Race) RemoveCompetitorsP(exec boil.Executor, related ...*Competitor) {
	if err := o.RemoveCompetitors(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCompetitorsGP relationships from objects passed in.
// Removes related items from R.Competitors (uses pointer comparison, removal does not keep order)
// Sets related.R.Race.
// Uses the global database handle and panics on error.
func (o *Race) RemoveCompetitorsGP(related ...*Competitor) {
	if err := o.RemoveCompetitors(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCompetitors relationships from objects passed in.
// Removes related items from R.Competitors (uses pointer comparison, removal does not keep order)
// Sets related.R.Race.
func (o *Race) RemoveCompetitors(exec boil.Executor, related ...*Competitor) error {
	var err error
	for _, rel := range related {
		rel.RaceID.Valid = false
		if rel.R != nil {
			rel.R.Race = nil
		}
		if err = rel.Update(exec, "race_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Competitors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Competitors)
			if ln > 1 && i < ln-1 {
				o.R.Competitors[i] = o.R.Competitors[ln-1]
			}
			o.R.Competitors = o.R.Competitors[:ln-1]
			break
		}
	}

	return nil
}

// RacesG retrieves all records.
func RacesG(mods ...qm.QueryMod) raceQuery {
	return Races(boil.GetDB(), mods...)
}

// Races retrieves all the records using an executor.
func Races(exec boil.Executor, mods ...qm.QueryMod) raceQuery {
	mods = append(mods, qm.From("\"race\""))
	return raceQuery{NewQuery(exec, mods...)}
}

// FindRaceG retrieves a single record by ID.
func FindRaceG(raceID string, selectCols ...string) (*Race, error) {
	return FindRace(boil.GetDB(), raceID, selectCols...)
}

// FindRaceGP retrieves a single record by ID, and panics on error.
func FindRaceGP(raceID string, selectCols ...string) *Race {
	retobj, err := FindRace(boil.GetDB(), raceID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRace(exec boil.Executor, raceID string, selectCols ...string) (*Race, error) {
	raceObj := &Race{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"race\" where \"race_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, raceID)

	err := q.Bind(raceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from race")
	}

	return raceObj, nil
}

// FindRaceP retrieves a single record by ID with an executor, and panics on error.
func FindRaceP(exec boil.Executor, raceID string, selectCols ...string) *Race {
	retobj, err := FindRace(exec, raceID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Race) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Race) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Race) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Race) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no race provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(raceColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	raceInsertCacheMut.RLock()
	cache, cached := raceInsertCache[key]
	raceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			raceColumns,
			raceColumnsWithDefault,
			raceColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(raceType, raceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(raceType, raceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"race\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"race\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into race")
	}

	if !cached {
		raceInsertCacheMut.Lock()
		raceInsertCache[key] = cache
		raceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Race record. See Update for
// whitelist behavior description.
func (o *Race) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Race record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Race) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Race, and panics on error.
// See Update for whitelist behavior description.
func (o *Race) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Race.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Race) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	raceUpdateCacheMut.RLock()
	cache, cached := raceUpdateCache[key]
	raceUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			raceColumns,
			racePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update race, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"race\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, racePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(raceType, raceMapping, append(wl, racePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update race row")
	}

	if !cached {
		raceUpdateCacheMut.Lock()
		raceUpdateCache[key] = cache
		raceUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q raceQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q raceQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for race")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RaceSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RaceSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RaceSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RaceSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), racePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"race\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, racePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in race slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Race) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Race) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Race) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Race) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no race provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(raceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	raceUpsertCacheMut.RLock()
	cache, cached := raceUpsertCache[key]
	raceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			raceColumns,
			raceColumnsWithDefault,
			raceColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			raceColumns,
			racePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert race, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(racePrimaryKeyColumns))
			copy(conflict, racePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"race\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(raceType, raceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(raceType, raceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert race")
	}

	if !cached {
		raceUpsertCacheMut.Lock()
		raceUpsertCache[key] = cache
		raceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Race record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Race) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Race record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Race) DeleteG() error {
	if o == nil {
		return errors.New("models: no Race provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Race record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Race) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Race record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Race) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Race provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), racePrimaryKeyMapping)
	sql := "DELETE FROM \"race\" WHERE \"race_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from race")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q raceQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q raceQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no raceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from race")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RaceSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RaceSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Race slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RaceSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RaceSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Race slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(raceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), racePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"race\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, racePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from race slice")
	}

	if len(raceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Race) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Race) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Race) ReloadG() error {
	if o == nil {
		return errors.New("models: no Race provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Race) Reload(exec boil.Executor) error {
	ret, err := FindRace(exec, o.RaceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RaceSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RaceSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RaceSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RaceSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RaceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	races := RaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), racePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"race\".* FROM \"race\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, racePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&races)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RaceSlice")
	}

	*o = races

	return nil
}

// RaceExists checks if the Race row exists.
func RaceExists(exec boil.Executor, raceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"race\" where \"race_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, raceID)
	}

	row := exec.QueryRow(sql, raceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if race exists")
	}

	return exists, nil
}

// RaceExistsG checks if the Race row exists.
func RaceExistsG(raceID string) (bool, error) {
	return RaceExists(boil.GetDB(), raceID)
}

// RaceExistsGP checks if the Race row exists. Panics on error.
func RaceExistsGP(raceID string) bool {
	e, err := RaceExists(boil.GetDB(), raceID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RaceExistsP checks if the Race row exists. Panics on error.
func RaceExistsP(exec boil.Executor, raceID string) bool {
	e, err := RaceExists(exec, raceID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
