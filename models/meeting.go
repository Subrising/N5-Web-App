// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Meeting is an object representing the database table.
type Meeting struct {
	MeetingID   string `boil:"meeting_id" json:"meeting_id" toml:"meeting_id" yaml:"meeting_id"`
	MeetingName string `boil:"meeting_name" json:"meeting_name" toml:"meeting_name" yaml:"meeting_name"`

	R *meetingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L meetingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MeetingColumns = struct {
	MeetingID   string
	MeetingName string
}{
	MeetingID:   "meeting_id",
	MeetingName: "meeting_name",
}

// meetingR is where relationships are stored.
type meetingR struct {
	Races RaceSlice
}

// meetingL is where Load methods for each relationship are stored.
type meetingL struct{}

var (
	meetingColumns               = []string{"meeting_id", "meeting_name"}
	meetingColumnsWithoutDefault = []string{"meeting_name"}
	meetingColumnsWithDefault    = []string{"meeting_id"}
	meetingPrimaryKeyColumns     = []string{"meeting_id"}
)

type (
	// MeetingSlice is an alias for a slice of pointers to Meeting.
	// This should generally be used opposed to []Meeting.
	MeetingSlice []*Meeting
	// MeetingHook is the signature for custom Meeting hook methods
	MeetingHook func(boil.Executor, *Meeting) error

	meetingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	meetingType                 = reflect.TypeOf(&Meeting{})
	meetingMapping              = queries.MakeStructMapping(meetingType)
	meetingPrimaryKeyMapping, _ = queries.BindMapping(meetingType, meetingMapping, meetingPrimaryKeyColumns)
	meetingInsertCacheMut       sync.RWMutex
	meetingInsertCache          = make(map[string]insertCache)
	meetingUpdateCacheMut       sync.RWMutex
	meetingUpdateCache          = make(map[string]updateCache)
	meetingUpsertCacheMut       sync.RWMutex
	meetingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var meetingBeforeInsertHooks []MeetingHook
var meetingBeforeUpdateHooks []MeetingHook
var meetingBeforeDeleteHooks []MeetingHook
var meetingBeforeUpsertHooks []MeetingHook

var meetingAfterInsertHooks []MeetingHook
var meetingAfterSelectHooks []MeetingHook
var meetingAfterUpdateHooks []MeetingHook
var meetingAfterDeleteHooks []MeetingHook
var meetingAfterUpsertHooks []MeetingHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Meeting) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Meeting) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Meeting) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Meeting) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Meeting) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Meeting) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Meeting) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Meeting) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Meeting) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range meetingAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMeetingHook registers your hook function for all future operations.
func AddMeetingHook(hookPoint boil.HookPoint, meetingHook MeetingHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		meetingBeforeInsertHooks = append(meetingBeforeInsertHooks, meetingHook)
	case boil.BeforeUpdateHook:
		meetingBeforeUpdateHooks = append(meetingBeforeUpdateHooks, meetingHook)
	case boil.BeforeDeleteHook:
		meetingBeforeDeleteHooks = append(meetingBeforeDeleteHooks, meetingHook)
	case boil.BeforeUpsertHook:
		meetingBeforeUpsertHooks = append(meetingBeforeUpsertHooks, meetingHook)
	case boil.AfterInsertHook:
		meetingAfterInsertHooks = append(meetingAfterInsertHooks, meetingHook)
	case boil.AfterSelectHook:
		meetingAfterSelectHooks = append(meetingAfterSelectHooks, meetingHook)
	case boil.AfterUpdateHook:
		meetingAfterUpdateHooks = append(meetingAfterUpdateHooks, meetingHook)
	case boil.AfterDeleteHook:
		meetingAfterDeleteHooks = append(meetingAfterDeleteHooks, meetingHook)
	case boil.AfterUpsertHook:
		meetingAfterUpsertHooks = append(meetingAfterUpsertHooks, meetingHook)
	}
}

// OneP returns a single meeting record from the query, and panics on error.
func (q meetingQuery) OneP() *Meeting {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single meeting record from the query.
func (q meetingQuery) One() (*Meeting, error) {
	o := &Meeting{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for meeting")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Meeting records from the query, and panics on error.
func (q meetingQuery) AllP() MeetingSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Meeting records from the query.
func (q meetingQuery) All() (MeetingSlice, error) {
	var o []*Meeting

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Meeting slice")
	}

	if len(meetingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Meeting records in the query, and panics on error.
func (q meetingQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Meeting records in the query.
func (q meetingQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count meeting rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q meetingQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q meetingQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if meeting exists")
	}

	return count > 0, nil
}

// RacesG retrieves all the race's race.
func (o *Meeting) RacesG(mods ...qm.QueryMod) raceQuery {
	return o.Races(boil.GetDB(), mods...)
}

// Races retrieves all the race's race with an executor.
func (o *Meeting) Races(exec boil.Executor, mods ...qm.QueryMod) raceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"race\".\"meeting_id\"=?", o.MeetingID),
	)

	query := Races(exec, queryMods...)
	queries.SetFrom(query.Query, "\"race\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"race\".*"})
	}

	return query
}

// LoadRaces allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (meetingL) LoadRaces(e boil.Executor, singular bool, maybeMeeting interface{}) error {
	var slice []*Meeting
	var object *Meeting

	count := 1
	if singular {
		object = maybeMeeting.(*Meeting)
	} else {
		slice = *maybeMeeting.(*[]*Meeting)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &meetingR{}
		}
		args[0] = object.MeetingID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &meetingR{}
			}
			args[i] = obj.MeetingID
		}
	}

	query := fmt.Sprintf(
		"select * from \"race\" where \"meeting_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load race")
	}
	defer results.Close()

	var resultSlice []*Race
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice race")
	}

	if len(raceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Races = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MeetingID == foreign.MeetingID.String {
				local.R.Races = append(local.R.Races, foreign)
				break
			}
		}
	}

	return nil
}

// AddRacesG adds the given related objects to the existing relationships
// of the meeting, optionally inserting them as new records.
// Appends related to o.R.Races.
// Sets related.R.Meeting appropriately.
// Uses the global database handle.
func (o *Meeting) AddRacesG(insert bool, related ...*Race) error {
	return o.AddRaces(boil.GetDB(), insert, related...)
}

// AddRacesP adds the given related objects to the existing relationships
// of the meeting, optionally inserting them as new records.
// Appends related to o.R.Races.
// Sets related.R.Meeting appropriately.
// Panics on error.
func (o *Meeting) AddRacesP(exec boil.Executor, insert bool, related ...*Race) {
	if err := o.AddRaces(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRacesGP adds the given related objects to the existing relationships
// of the meeting, optionally inserting them as new records.
// Appends related to o.R.Races.
// Sets related.R.Meeting appropriately.
// Uses the global database handle and panics on error.
func (o *Meeting) AddRacesGP(insert bool, related ...*Race) {
	if err := o.AddRaces(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRaces adds the given related objects to the existing relationships
// of the meeting, optionally inserting them as new records.
// Appends related to o.R.Races.
// Sets related.R.Meeting appropriately.
func (o *Meeting) AddRaces(exec boil.Executor, insert bool, related ...*Race) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MeetingID.String = o.MeetingID
			rel.MeetingID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"race\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"meeting_id"}),
				strmangle.WhereClause("\"", "\"", 2, racePrimaryKeyColumns),
			)
			values := []interface{}{o.MeetingID, rel.RaceID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MeetingID.String = o.MeetingID
			rel.MeetingID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &meetingR{
			Races: related,
		}
	} else {
		o.R.Races = append(o.R.Races, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &raceR{
				Meeting: o,
			}
		} else {
			rel.R.Meeting = o
		}
	}
	return nil
}

// SetRacesG removes all previously related items of the
// meeting replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Meeting's Races accordingly.
// Replaces o.R.Races with related.
// Sets related.R.Meeting's Races accordingly.
// Uses the global database handle.
func (o *Meeting) SetRacesG(insert bool, related ...*Race) error {
	return o.SetRaces(boil.GetDB(), insert, related...)
}

// SetRacesP removes all previously related items of the
// meeting replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Meeting's Races accordingly.
// Replaces o.R.Races with related.
// Sets related.R.Meeting's Races accordingly.
// Panics on error.
func (o *Meeting) SetRacesP(exec boil.Executor, insert bool, related ...*Race) {
	if err := o.SetRaces(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRacesGP removes all previously related items of the
// meeting replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Meeting's Races accordingly.
// Replaces o.R.Races with related.
// Sets related.R.Meeting's Races accordingly.
// Uses the global database handle and panics on error.
func (o *Meeting) SetRacesGP(insert bool, related ...*Race) {
	if err := o.SetRaces(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRaces removes all previously related items of the
// meeting replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Meeting's Races accordingly.
// Replaces o.R.Races with related.
// Sets related.R.Meeting's Races accordingly.
func (o *Meeting) SetRaces(exec boil.Executor, insert bool, related ...*Race) error {
	query := "update \"race\" set \"meeting_id\" = null where \"meeting_id\" = $1"
	values := []interface{}{o.MeetingID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Races {
			rel.MeetingID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Meeting = nil
		}

		o.R.Races = nil
	}
	return o.AddRaces(exec, insert, related...)
}

// RemoveRacesG relationships from objects passed in.
// Removes related items from R.Races (uses pointer comparison, removal does not keep order)
// Sets related.R.Meeting.
// Uses the global database handle.
func (o *Meeting) RemoveRacesG(related ...*Race) error {
	return o.RemoveRaces(boil.GetDB(), related...)
}

// RemoveRacesP relationships from objects passed in.
// Removes related items from R.Races (uses pointer comparison, removal does not keep order)
// Sets related.R.Meeting.
// Panics on error.
func (o *Meeting) RemoveRacesP(exec boil.Executor, related ...*Race) {
	if err := o.RemoveRaces(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRacesGP relationships from objects passed in.
// Removes related items from R.Races (uses pointer comparison, removal does not keep order)
// Sets related.R.Meeting.
// Uses the global database handle and panics on error.
func (o *Meeting) RemoveRacesGP(related ...*Race) {
	if err := o.RemoveRaces(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRaces relationships from objects passed in.
// Removes related items from R.Races (uses pointer comparison, removal does not keep order)
// Sets related.R.Meeting.
func (o *Meeting) RemoveRaces(exec boil.Executor, related ...*Race) error {
	var err error
	for _, rel := range related {
		rel.MeetingID.Valid = false
		if rel.R != nil {
			rel.R.Meeting = nil
		}
		if err = rel.Update(exec, "meeting_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Races {
			if rel != ri {
				continue
			}

			ln := len(o.R.Races)
			if ln > 1 && i < ln-1 {
				o.R.Races[i] = o.R.Races[ln-1]
			}
			o.R.Races = o.R.Races[:ln-1]
			break
		}
	}

	return nil
}

// MeetingsG retrieves all records.
func MeetingsG(mods ...qm.QueryMod) meetingQuery {
	return Meetings(boil.GetDB(), mods...)
}

// Meetings retrieves all the records using an executor.
func Meetings(exec boil.Executor, mods ...qm.QueryMod) meetingQuery {
	mods = append(mods, qm.From("\"meeting\""))
	return meetingQuery{NewQuery(exec, mods...)}
}

// FindMeetingG retrieves a single record by ID.
func FindMeetingG(meetingID string, selectCols ...string) (*Meeting, error) {
	return FindMeeting(boil.GetDB(), meetingID, selectCols...)
}

// FindMeetingGP retrieves a single record by ID, and panics on error.
func FindMeetingGP(meetingID string, selectCols ...string) *Meeting {
	retobj, err := FindMeeting(boil.GetDB(), meetingID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMeeting retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMeeting(exec boil.Executor, meetingID string, selectCols ...string) (*Meeting, error) {
	meetingObj := &Meeting{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"meeting\" where \"meeting_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, meetingID)

	err := q.Bind(meetingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from meeting")
	}

	return meetingObj, nil
}

// FindMeetingP retrieves a single record by ID with an executor, and panics on error.
func FindMeetingP(exec boil.Executor, meetingID string, selectCols ...string) *Meeting {
	retobj, err := FindMeeting(exec, meetingID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Meeting) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Meeting) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Meeting) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Meeting) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no meeting provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(meetingColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	meetingInsertCacheMut.RLock()
	cache, cached := meetingInsertCache[key]
	meetingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			meetingColumns,
			meetingColumnsWithDefault,
			meetingColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(meetingType, meetingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(meetingType, meetingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"meeting\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"meeting\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into meeting")
	}

	if !cached {
		meetingInsertCacheMut.Lock()
		meetingInsertCache[key] = cache
		meetingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Meeting record. See Update for
// whitelist behavior description.
func (o *Meeting) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Meeting record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Meeting) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Meeting, and panics on error.
// See Update for whitelist behavior description.
func (o *Meeting) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Meeting.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Meeting) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	meetingUpdateCacheMut.RLock()
	cache, cached := meetingUpdateCache[key]
	meetingUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			meetingColumns,
			meetingPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update meeting, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"meeting\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, meetingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(meetingType, meetingMapping, append(wl, meetingPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update meeting row")
	}

	if !cached {
		meetingUpdateCacheMut.Lock()
		meetingUpdateCache[key] = cache
		meetingUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q meetingQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q meetingQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for meeting")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MeetingSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MeetingSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MeetingSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MeetingSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), meetingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"meeting\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, meetingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in meeting slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Meeting) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Meeting) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Meeting) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Meeting) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no meeting provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(meetingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	meetingUpsertCacheMut.RLock()
	cache, cached := meetingUpsertCache[key]
	meetingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			meetingColumns,
			meetingColumnsWithDefault,
			meetingColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			meetingColumns,
			meetingPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert meeting, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(meetingPrimaryKeyColumns))
			copy(conflict, meetingPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"meeting\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(meetingType, meetingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(meetingType, meetingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert meeting")
	}

	if !cached {
		meetingUpsertCacheMut.Lock()
		meetingUpsertCache[key] = cache
		meetingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Meeting record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Meeting) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Meeting record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Meeting) DeleteG() error {
	if o == nil {
		return errors.New("models: no Meeting provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Meeting record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Meeting) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Meeting record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Meeting) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Meeting provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), meetingPrimaryKeyMapping)
	sql := "DELETE FROM \"meeting\" WHERE \"meeting_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from meeting")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q meetingQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q meetingQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no meetingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from meeting")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MeetingSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MeetingSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Meeting slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MeetingSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MeetingSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Meeting slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(meetingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), meetingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"meeting\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, meetingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from meeting slice")
	}

	if len(meetingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Meeting) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Meeting) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Meeting) ReloadG() error {
	if o == nil {
		return errors.New("models: no Meeting provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Meeting) Reload(exec boil.Executor) error {
	ret, err := FindMeeting(exec, o.MeetingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MeetingSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MeetingSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MeetingSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty MeetingSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MeetingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	meetings := MeetingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), meetingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"meeting\".* FROM \"meeting\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, meetingPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&meetings)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MeetingSlice")
	}

	*o = meetings

	return nil
}

// MeetingExists checks if the Meeting row exists.
func MeetingExists(exec boil.Executor, meetingID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"meeting\" where \"meeting_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, meetingID)
	}

	row := exec.QueryRow(sql, meetingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if meeting exists")
	}

	return exists, nil
}

// MeetingExistsG checks if the Meeting row exists.
func MeetingExistsG(meetingID string) (bool, error) {
	return MeetingExists(boil.GetDB(), meetingID)
}

// MeetingExistsGP checks if the Meeting row exists. Panics on error.
func MeetingExistsGP(meetingID string) bool {
	e, err := MeetingExists(boil.GetDB(), meetingID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MeetingExistsP checks if the Meeting row exists. Panics on error.
func MeetingExistsP(exec boil.Executor, meetingID string) bool {
	e, err := MeetingExists(exec, meetingID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
