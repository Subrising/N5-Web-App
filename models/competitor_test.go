// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testCompetitors(t *testing.T) {
	t.Parallel()

	query := Competitors(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCompetitorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = competitor.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Competitors(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CompetitorSlice{competitor}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCompetitorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CompetitorExists(tx, competitor.CompetitorID)
	if err != nil {
		t.Errorf("Unable to check if Competitor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompetitorExistsG to return true, but got false.")
	}
}
func testCompetitorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	competitorFound, err := FindCompetitor(tx, competitor.CompetitorID)
	if err != nil {
		t.Error(err)
	}

	if competitorFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCompetitorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Competitors(tx).Bind(competitor); err != nil {
		t.Error(err)
	}
}

func testCompetitorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Competitors(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompetitorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitorOne := &Competitor{}
	competitorTwo := &Competitor{}
	if err = randomize.Struct(seed, competitorOne, competitorDBTypes, false, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}
	if err = randomize.Struct(seed, competitorTwo, competitorDBTypes, false, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitorOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = competitorTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Competitors(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompetitorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	competitorOne := &Competitor{}
	competitorTwo := &Competitor{}
	if err = randomize.Struct(seed, competitorOne, competitorDBTypes, false, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}
	if err = randomize.Struct(seed, competitorTwo, competitorDBTypes, false, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitorOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = competitorTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func competitorBeforeInsertHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorAfterInsertHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorAfterSelectHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorBeforeUpdateHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorAfterUpdateHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorBeforeDeleteHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorAfterDeleteHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorBeforeUpsertHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func competitorAfterUpsertHook(e boil.Executor, o *Competitor) error {
	*o = Competitor{}
	return nil
}

func testCompetitorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Competitor{}
	o := &Competitor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, competitorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Competitor object: %s", err)
	}

	AddCompetitorHook(boil.BeforeInsertHook, competitorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	competitorBeforeInsertHooks = []CompetitorHook{}

	AddCompetitorHook(boil.AfterInsertHook, competitorAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	competitorAfterInsertHooks = []CompetitorHook{}

	AddCompetitorHook(boil.AfterSelectHook, competitorAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	competitorAfterSelectHooks = []CompetitorHook{}

	AddCompetitorHook(boil.BeforeUpdateHook, competitorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	competitorBeforeUpdateHooks = []CompetitorHook{}

	AddCompetitorHook(boil.AfterUpdateHook, competitorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	competitorAfterUpdateHooks = []CompetitorHook{}

	AddCompetitorHook(boil.BeforeDeleteHook, competitorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	competitorBeforeDeleteHooks = []CompetitorHook{}

	AddCompetitorHook(boil.AfterDeleteHook, competitorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	competitorAfterDeleteHooks = []CompetitorHook{}

	AddCompetitorHook(boil.BeforeUpsertHook, competitorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	competitorBeforeUpsertHooks = []CompetitorHook{}

	AddCompetitorHook(boil.AfterUpsertHook, competitorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	competitorAfterUpsertHooks = []CompetitorHook{}
}
func testCompetitorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx, competitorColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitorToOneRaceUsingRace(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Competitor
	var foreign Race

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, raceDBTypes, false, raceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Race struct: %s", err)
	}

	local.RaceID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RaceID.String = foreign.RaceID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Race(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.RaceID != foreign.RaceID {
		t.Errorf("want: %v, got %v", foreign.RaceID, check.RaceID)
	}

	slice := CompetitorSlice{&local}
	if err = local.L.LoadRace(tx, false, (*[]*Competitor)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Race == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Race = nil
	if err = local.L.LoadRace(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Race == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompetitorToOneSetOpRaceUsingRace(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Competitor
	var b, c Race

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitorDBTypes, false, strmangle.SetComplement(competitorPrimaryKeyColumns, competitorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, raceDBTypes, false, strmangle.SetComplement(racePrimaryKeyColumns, raceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, raceDBTypes, false, strmangle.SetComplement(racePrimaryKeyColumns, raceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Race{&b, &c} {
		err = a.SetRace(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Race != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Competitors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RaceID.String != x.RaceID {
			t.Error("foreign key was wrong value", a.RaceID.String)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RaceID.String))
		reflect.Indirect(reflect.ValueOf(&a.RaceID.String)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RaceID.String != x.RaceID {
			t.Error("foreign key was wrong value", a.RaceID.String, x.RaceID)
		}
	}
}

func testCompetitorToOneRemoveOpRaceUsingRace(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Competitor
	var b Race

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitorDBTypes, false, strmangle.SetComplement(competitorPrimaryKeyColumns, competitorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, raceDBTypes, false, strmangle.SetComplement(racePrimaryKeyColumns, raceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRace(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRace(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Race(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Race != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RaceID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Competitors) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompetitorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = competitor.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCompetitorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CompetitorSlice{competitor}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCompetitorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Competitors(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	competitorDBTypes = map[string]string{`CompetitorID`: `uuid`, `Position`: `integer`, `RaceID`: `uuid`, `Type`: `character`}
	_                 = bytes.MinRead
)

func testCompetitorsUpdate(t *testing.T) {
	t.Parallel()

	if len(competitorColumns) == len(competitorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	if err = competitor.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCompetitorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(competitorColumns) == len(competitorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	competitor := &Competitor{}
	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, competitor, competitorDBTypes, true, competitorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(competitorColumns, competitorPrimaryKeyColumns) {
		fields = competitorColumns
	} else {
		fields = strmangle.SetComplement(
			competitorColumns,
			competitorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(competitor))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CompetitorSlice{competitor}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCompetitorsUpsert(t *testing.T) {
	t.Parallel()

	if len(competitorColumns) == len(competitorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	competitor := Competitor{}
	if err = randomize.Struct(seed, &competitor, competitorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = competitor.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Competitor: %s", err)
	}

	count, err := Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &competitor, competitorDBTypes, false, competitorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	if err = competitor.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Competitor: %s", err)
	}

	count, err = Competitors(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
